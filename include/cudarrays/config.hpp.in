/*
 * CUDArrays is a library for easy multi-GPU program development.
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2015 Barcelona Supercomputing Center and
 *                         University of Illinois
 *
 *  Developed by: Javier Cabezas <javier.cabezas@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE. */

#pragma once
#ifndef CUDARRAYS_CONFIG_HPP_
#define CUDARRAYS_CONFIG_HPP_

#include <array>
#include <cstdint>
#include <string>
#include <vector>

namespace cudarrays {
#ifdef LONG_INDEX
using array_index_t = int64_t;
using array_size_t = uint64_t;
#else
using array_index_t = int32_t;
using array_size_t = uint32_t;
#endif

#ifndef CUDARRAYS_ROOT_DIR
#define CUDARRAYS_ROOT_DIR "@CUDARRAYS_ROOT_DIR@"
#endif

#ifndef CUDARRAYS_INSTALL_DIR
#define CUDARRAYS_INSTALL_DIR "@CUDARRAYS_INSTALL_DIR@"
#endif

template <unsigned Dims>
using extents = std::array<array_size_t, Dims>;

template <typename... T>
auto make_extents(T... values) -> extents<sizeof...(T)>
{
    return extents<sizeof...(T)>{array_size_t(values)...};
}

namespace config {
extern bool OPTION_LOG_DEBUG;
extern bool OPTION_LOG_TRACE;
extern bool OPTION_LOG_VERBOSE;
extern bool OPTION_LOG_SHOW_PATH;
extern bool OPTION_LOG_SHORT_PATH;
extern bool OPTION_LOG_SHOW_SYMBOL;
extern bool OPTION_LOG_STRIP_NAMESPACE;
extern std::vector<std::string> OPTION_LOG_FILTER;

extern unsigned MAX_GPUS;
extern unsigned PEER_GPUS;

extern array_size_t CUDA_VM_ALIGN;
extern array_size_t PAGE_ALIGN;
extern array_size_t PAGES_PER_ARENA;

template <typename T>
static inline array_size_t
CUDA_VM_ALIGN_ELEMS()
{
    return CUDA_VM_ALIGN/sizeof(T);
}

} // namespace config
} // namespace cudarrays

#endif

/* vim:set ft=cpp backspace=2 tabstop=4 shiftwidth=4 textwidth=120 foldmethod=marker expandtab: */
